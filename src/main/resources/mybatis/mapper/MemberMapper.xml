<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper
	namespace="com.ssafy.enjoytrip.member.model.dao.MemberDao">

	<resultMap type="memberDto" id="member">
		<result column="userId" property="userId" />
		<result column="userName" property="userName" />
		<result column="userPwd" property="userPwd" />
		<result column="emailId" property="emailId" />
		<result column="emailDomain" property="emailDomain" />
		<result column="joinDate" property="joinDate" />
		<result column="token" property="refreshToken" />
	</resultMap>

	<select id="idCheck" parameterType="String"
		resultType="MemberDto">
		select count(*)
		from member
		where userId=#{id}
	</select>

	<insert id="joinMember" parameterType="MemberDto">
		insert into member(userId,
		userName, userPwd, emailId, emailDomain)
		values(#{userId}, #{userName},
		#{userPwd}, #{emailId}, #{emailDomain})
	</insert>

	<select id="getMemberById" parameterType="String"
		resultType="MemberDto">
		select userId, userName, userPwd, emailId, emailDomain,
		joinDate
		from member
		where userId=#{id}
	</select>

	<update id="updatePwdById" parameterType="MemberDto">
		update member set
		userPwd = #{newPw2}
		where userId = #{curId}
	</update>

	<update id="updateEmailById" parameterType="MemberDto">
		update member set
		emailDomain=#{newEmailDomain},
		emailId = #{newEmailId}
		where userId =
		#{userId}
	</update>

	<update id="updateUser" parameterType="MemberDto">
		update member set
		userName
		= #{userName},
		emailDomain=#{emailDomain},
		emailId = #{emailId}
		where
		userId = #{userId}
	</update>

	<update id="deleteUserById" parameterType="String">
		delete from member
		where userId = #{userId}
	</update>

	<select id="login" parameterType="map" resultMap="member">
		select userId,
		userName, token
		from member
		where userId = #{userId} and
		userPwd =
		#{userPwd}
	</select>

	<select id="userInfo" parameterType="string" resultMap="member">
		select
		userName, userId, emailId, emailDomain, joinDate
		from member
		where
		userId = #{userId}
	</select>

	<update id="saveRefreshToken" parameterType="map">
		update member
		set
		token = #{token}
		where userId = #{userId}
	</update>

	<select id="getRefreshToken" parameterType="string"
		resultType="string">
		select token
		from member
		where userId = #{userId}
	</select>

	<update id="deleteRefreshToken" parameterType="map">
		update member
		set
		token = #{token, jdbcType=VARCHAR}
		where userId = #{userId}
	</update>
	
	<select id="getPwdById" parameterType="String" resultType="String">
		select userPwd
		from member
		where userId = #{userId}
	</select>
</mapper>
